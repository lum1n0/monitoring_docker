# Generated by Django 5.1 on 2025-10-12 07:36

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='KubernetesCluster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название кластера')),
                ('config_path', models.CharField(blank=True, max_length=255, null=True, verbose_name='Путь к конфигу')),
                ('api_server_url', models.URLField(verbose_name='URL API сервера')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Kubernetes Кластер',
                'verbose_name_plural': 'Kubernetes Кластеры',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Namespace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя namespace')),
                ('status', models.CharField(default='Active', max_length=50, verbose_name='Статус')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='namespaces', to='main.kubernetescluster')),
            ],
            options={
                'verbose_name': 'Namespace',
                'verbose_name_plural': 'Namespaces',
                'ordering': ['name'],
                'unique_together': {('cluster', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Pod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Имя пода')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Running', 'Running'), ('Succeeded', 'Succeeded'), ('Failed', 'Failed'), ('Unknown', 'Unknown')], max_length=50, verbose_name='Статус')),
                ('node_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Имя узла')),
                ('pod_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP адрес пода')),
                ('host_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP адрес хоста')),
                ('restart_count', models.IntegerField(default=0, verbose_name='Количество перезапусков')),
                ('created_at', models.DateTimeField(verbose_name='Дата создания')),
                ('last_restart', models.DateTimeField(blank=True, null=True, verbose_name='Последний перезапуск')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('namespace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pods', to='main.namespace')),
            ],
            options={
                'verbose_name': 'Pod',
                'verbose_name_plural': 'Pods',
                'ordering': ['-created_at'],
                'unique_together': {('namespace', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Имя контейнера')),
                ('image', models.CharField(max_length=500, verbose_name='Образ')),
                ('image_id', models.CharField(blank=True, max_length=500, null=True, verbose_name='ID образа')),
                ('is_ready', models.BooleanField(default=False, verbose_name='Готов')),
                ('restart_count', models.IntegerField(default=0, verbose_name='Количество перезапусков')),
                ('state', models.CharField(max_length=50, verbose_name='Состояние')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('pod', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='containers', to='main.pod')),
            ],
            options={
                'verbose_name': 'Container',
                'verbose_name_plural': 'Containers',
                'ordering': ['name'],
                'unique_together': {('pod', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ContainerMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время измерения')),
                ('cpu_usage', models.FloatField(default=0.0, verbose_name='Использование CPU (миллиядра)')),
                ('memory_usage', models.BigIntegerField(default=0, verbose_name='Использование памяти (байты)')),
                ('network_rx_bytes', models.BigIntegerField(default=0, verbose_name='Получено байт по сети')),
                ('network_tx_bytes', models.BigIntegerField(default=0, verbose_name='Отправлено байт по сети')),
                ('disk_read_bytes', models.BigIntegerField(default=0, verbose_name='Прочитано байт с диска')),
                ('disk_write_bytes', models.BigIntegerField(default=0, verbose_name='Записано байт на диск')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='main.container')),
            ],
            options={
                'verbose_name': 'Метрика контейнера',
                'verbose_name_plural': 'Метрики контейнеров',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['container', '-timestamp'], name='main_contai_contain_618d0d_idx'), models.Index(fields=['-timestamp'], name='main_contai_timesta_4e81b6_idx')],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('namespace', models.CharField(max_length=100, verbose_name='Namespace')),
                ('event_type', models.CharField(choices=[('Normal', 'Normal'), ('Warning', 'Warning'), ('Error', 'Error')], max_length=50, verbose_name='Тип события')),
                ('reason', models.CharField(max_length=255, verbose_name='Причина')),
                ('message', models.TextField(verbose_name='Сообщение')),
                ('involved_object_kind', models.CharField(max_length=50, verbose_name='Тип объекта')),
                ('involved_object_name', models.CharField(max_length=255, verbose_name='Имя объекта')),
                ('count', models.IntegerField(default=1, verbose_name='Количество')),
                ('first_timestamp', models.DateTimeField(verbose_name='Первое появление')),
                ('last_timestamp', models.DateTimeField(verbose_name='Последнее появление')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='main.kubernetescluster')),
            ],
            options={
                'verbose_name': 'Событие',
                'verbose_name_plural': 'События',
                'ordering': ['-last_timestamp'],
                'indexes': [models.Index(fields=['cluster', '-last_timestamp'], name='main_event_cluster_5873de_idx'), models.Index(fields=['event_type', '-last_timestamp'], name='main_event_event_t_7ec613_idx')],
            },
        ),
    ]
