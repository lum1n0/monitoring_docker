# Generated by Django 5.1 on 2025-10-12 08:20

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DockerHost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название хоста')),
                ('host_url', models.CharField(help_text='Например: unix:///var/run/docker.sock или tcp://127.0.0.1:2375', max_length=255, verbose_name='URL Docker хоста')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Docker Host',
                'verbose_name_plural': 'Docker Hosts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DockerContainer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('container_id', models.CharField(max_length=64, verbose_name='ID контейнера')),
                ('name', models.CharField(max_length=255, verbose_name='Имя контейнера')),
                ('image', models.CharField(max_length=500, verbose_name='Образ')),
                ('image_id', models.CharField(blank=True, max_length=64, null=True, verbose_name='ID образа')),
                ('status', models.CharField(choices=[('created', 'Created'), ('running', 'Running'), ('paused', 'Paused'), ('restarting', 'Restarting'), ('removing', 'Removing'), ('exited', 'Exited'), ('dead', 'Dead')], max_length=50, verbose_name='Статус')),
                ('state', models.CharField(max_length=50, verbose_name='Состояние')),
                ('restart_count', models.IntegerField(default=0, verbose_name='Количество перезапусков')),
                ('ports', models.JSONField(blank=True, default=dict, verbose_name='Порты')),
                ('networks', models.JSONField(blank=True, default=list, verbose_name='Сети')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP адрес')),
                ('created', models.DateTimeField(verbose_name='Дата создания контейнера')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Время запуска')),
                ('finished_at', models.DateTimeField(blank=True, null=True, verbose_name='Время остановки')),
                ('labels', models.JSONField(blank=True, default=dict, verbose_name='Метки')),
                ('command', models.TextField(blank=True, null=True, verbose_name='Команда')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='containers', to='main.dockerhost')),
            ],
            options={
                'verbose_name': 'Docker Container',
                'verbose_name_plural': 'Docker Containers',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='DockerContainerMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время измерения')),
                ('cpu_usage_percent', models.FloatField(default=0.0, verbose_name='Использование CPU (%)')),
                ('cpu_system_usage', models.BigIntegerField(default=0, verbose_name='Системное использование CPU')),
                ('cpu_total_usage', models.BigIntegerField(default=0, verbose_name='Общее использование CPU')),
                ('memory_usage', models.BigIntegerField(default=0, verbose_name='Использование памяти (байты)')),
                ('memory_limit', models.BigIntegerField(default=0, verbose_name='Лимит памяти (байты)')),
                ('memory_percent', models.FloatField(default=0.0, verbose_name='Использование памяти (%)')),
                ('network_rx_bytes', models.BigIntegerField(default=0, verbose_name='Получено байт по сети')),
                ('network_tx_bytes', models.BigIntegerField(default=0, verbose_name='Отправлено байт по сети')),
                ('network_rx_packets', models.BigIntegerField(default=0, verbose_name='Получено пакетов')),
                ('network_tx_packets', models.BigIntegerField(default=0, verbose_name='Отправлено пакетов')),
                ('block_read_bytes', models.BigIntegerField(default=0, verbose_name='Прочитано байт с диска')),
                ('block_write_bytes', models.BigIntegerField(default=0, verbose_name='Записано байт на диск')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='main.dockercontainer')),
            ],
            options={
                'verbose_name': 'Метрика Docker контейнера',
                'verbose_name_plural': 'Метрики Docker контейнеров',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['container', '-timestamp'], name='main_docker_contain_1a848e_idx'), models.Index(fields=['-timestamp'], name='main_docker_timesta_07e211_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='dockercontainer',
            index=models.Index(fields=['host', 'status'], name='main_docker_host_id_babf7e_idx'),
        ),
        migrations.AddIndex(
            model_name='dockercontainer',
            index=models.Index(fields=['status'], name='main_docker_status_624cd8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dockercontainer',
            unique_together={('host', 'container_id')},
        ),
    ]
