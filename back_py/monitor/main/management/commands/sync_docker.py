from django.core.management.base import BaseCommand
from main.models import DockerHost, DockerContainer, DockerContainerMetric
from main.services.docker_service import DockerService
from django.utils import timezone


class Command(BaseCommand):
    help = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏–∑ Docker'

    def add_arguments(self, parser):
        parser.add_argument(
            '--host-id',
            type=int,
            help='ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Docker —Ö–æ—Å—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'
        )
        parser.add_argument(
            '--skip-metrics',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ (–±—ã—Å—Ç—Ä–µ–µ)'
        )

    def handle(self, *args, **options):
        host_id = options.get('host_id')
        skip_metrics = options.get('skip_metrics', False)
        
        self.stdout.write(self.style.WARNING('\n=== –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ===\n'))

        # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if host_id:
            docker_hosts = DockerHost.objects.filter(id=host_id, is_active=True)
            if not docker_hosts.exists():
                self.stdout.write(self.style.ERROR(f'‚úó Docker —Ö–æ—Å—Ç —Å ID {host_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!'))
                return
        else:
            docker_hosts = DockerHost.objects.filter(is_active=True)
        
        if not docker_hosts.exists():
            self.stdout.write(self.style.ERROR('‚úó –ê–∫—Ç–∏–≤–Ω—ã–µ Docker —Ö–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!'))
            self.stdout.write('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python manage.py setup_docker')
            return
        
        self.stdout.write(f'–ù–∞–π–¥–µ–Ω–æ Docker —Ö–æ—Å—Ç–æ–≤: {docker_hosts.count()}\n')
        
        total_synced = 0
        total_removed = 0
        total_metrics = 0
        
        for host in docker_hosts:
            self.stdout.write(f'üì¶ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {host.name}')
            self.stdout.write(f'   URL: {host.host_url if host.host_url else "(–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)"}')
            
            try:
                docker_service = DockerService(host.host_url)
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏–∑ Docker
                containers_data = docker_service.get_all_containers(all_containers=True)
                self.stdout.write(f'   –ù–∞–π–¥–µ–Ω–æ –≤ Docker: {len(containers_data)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤')
                
                # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–∑ Docker
                docker_container_ids = set()
                synced_count = 0
                metrics_count = 0
                
                for container_data in containers_data:
                    docker_container_ids.add(container_data['container_id'])
                    
                    try:
                        container, created = DockerContainer.objects.update_or_create(
                            host=host,
                            container_id=container_data['container_id'],
                            defaults={
                                'name': container_data['name'],
                                'image': container_data['image'],
                                'image_id': container_data['image_id'],
                                'status': container_data['status'],
                                'state': container_data['state'],
                                'restart_count': container_data['restart_count'],
                                'ports': container_data['ports'],
                                'networks': container_data['networks'],
                                'ip_address': container_data['ip_address'],
                                'created': container_data['created'],
                                'started_at': container_data['started_at'],
                                'finished_at': container_data['finished_at'],
                                'labels': container_data['labels'],
                            }
                        )
                        synced_count += 1
                        
                        status_emoji = '‚úÖ' if container_data['status'] == 'running' else '‚è∏Ô∏è' if container_data['status'] == 'paused' else '‚èπÔ∏è'
                        action = '+ –°–æ–∑–¥–∞–Ω' if created else '‚Üª –û–±–Ω–æ–≤–ª–µ–Ω'
                        self.stdout.write(f'   {status_emoji} {action}: {container.name} ({container_data["status"]})')
                        
                        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                        if not skip_metrics and container_data['status'] == 'running':
                            try:
                                stats = docker_service.get_container_stats(container_data['container_id'])
                                if stats:
                                    DockerContainerMetric.objects.create(
                                        container=container,
                                        timestamp=stats['timestamp'],
                                        cpu_usage_percent=stats['cpu_usage_percent'],
                                        cpu_system_usage=stats['cpu_system_usage'],
                                        cpu_total_usage=stats['cpu_total_usage'],
                                        memory_usage=stats['memory_usage'],
                                        memory_limit=stats['memory_limit'],
                                        memory_percent=stats['memory_percent'],
                                        network_rx_bytes=stats['network_rx_bytes'],
                                        network_tx_bytes=stats['network_tx_bytes'],
                                        network_rx_packets=stats['network_rx_packets'],
                                        network_tx_packets=stats['network_tx_packets'],
                                        block_read_bytes=stats['block_read_bytes'],
                                        block_write_bytes=stats['block_write_bytes'],
                                    )
                                    metrics_count += 1
                            except Exception as e:
                                self.stdout.write(self.style.WARNING(f'      ‚ö† –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è {container.name}: {str(e)[:50]}'))
                        
                    except Exception as e:
                        self.stdout.write(self.style.ERROR(f'   ‚úó –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {container_data["name"]}: {e}'))
                        continue
                
                # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ Docker
                removed = DockerContainer.objects.filter(host=host).exclude(
                    container_id__in=docker_container_ids
                )
                removed_count = removed.count()
                
                if removed_count > 0:
                    self.stdout.write(f'   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ {removed_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π...')
                    for container in removed:
                        self.stdout.write(f'      - –£–¥–∞–ª–µ–Ω: {container.name}')
                    removed.delete()
                
                total_synced += synced_count
                total_removed += removed_count
                total_metrics += metrics_count
                
                self.stdout.write(self.style.SUCCESS(
                    f'   ‚úì –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {synced_count} | –£–¥–∞–ª–µ–Ω–æ: {removed_count} | –ú–µ—Ç—Ä–∏–∫–∏: {metrics_count}\n'
                ))
                
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'   ‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}\n'))

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write(self.style.SUCCESS('=== –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ==='))
        self.stdout.write(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
        self.stdout.write(f'   –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_synced}')
        self.stdout.write(f'   –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {total_removed}')
        self.stdout.write(f'   –ú–µ—Ç—Ä–∏–∫ —Å–æ–±—Ä–∞–Ω–æ: {total_metrics}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
        self.stdout.write(f'\nüìà –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:')
        total_containers = DockerContainer.objects.count()
        running_containers = DockerContainer.objects.filter(status='running').count()
        self.stdout.write(f'   –í—Å–µ–≥–æ –≤ –ë–î: {total_containers} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤')
        self.stdout.write(f'   –ó–∞–ø—É—â–µ–Ω–æ: {running_containers} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤')
